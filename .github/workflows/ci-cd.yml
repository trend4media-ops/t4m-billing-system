name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  # ========================================
  # TESTING JOBS
  # ========================================
  
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      sqlite:
        image: alpine:latest
        options: >-
          --health-cmd "echo 'SQLite ready'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'trend4media-backend/package-lock.json'

      - name: Install backend dependencies
        working-directory: trend4media-backend
        run: npm ci

      - name: Run backend linting
        working-directory: trend4media-backend
        run: npm run lint

      - name: Run backend unit tests with coverage
        working-directory: trend4media-backend
        run: npm run test:cov
        env:
          NODE_ENV: test

      - name: Run backend E2E tests
        working-directory: trend4media-backend
        run: npm run test:e2e
        env:
          NODE_ENV: test

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: trend4media-backend/coverage
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

      - name: Upload backend coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage-report
          path: trend4media-backend/coverage/

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'trend4media-frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: trend4media-frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: trend4media-frontend
        run: npm run lint

      - name: Run frontend unit tests with coverage
        working-directory: trend4media-frontend
        run: npm run test:unit:ci
        env:
          NODE_ENV: test

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: trend4media-frontend/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

      - name: Upload frontend coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage-report
          path: trend4media-frontend/coverage/

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'trend4media-frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: trend4media-frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: trend4media-backend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: trend4media-frontend
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Build frontend
        working-directory: trend4media-frontend
        run: npm run build

      - name: Start backend server
        working-directory: trend4media-backend
        run: |
          npm run build
          nohup npm run start:prod &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3100

      - name: Start frontend server
        working-directory: trend4media-frontend
        run: |
          nohup npm run start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Wait for servers to be ready
        run: |
          npx wait-on http://localhost:3000 http://localhost:3100 --timeout 60000

      - name: Run E2E tests
        working-directory: trend4media-frontend
        run: npm run test:e2e
        env:
          BACKEND_URL: http://localhost:3100
          FRONTEND_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: trend4media-frontend/playwright-report/

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-videos
          path: trend4media-frontend/test-results/

  # ========================================
  # COMBINED TEST JOB (as requested)
  # ========================================
  
  test:
    name: All Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd trend4media-backend && npm ci
          cd ../trend4media-frontend && npm ci

      - name: Run all tests
        run: |
          cd trend4media-backend && npm run test:cov
          cd ../trend4media-frontend && npm run test:unit:ci

      - name: Generate combined coverage report
        run: |
          echo "✅ All tests passed successfully!"
          echo "Backend coverage: $(cat trend4media-backend/coverage/coverage-summary.json | jq .total.lines.pct)%"
          echo "Frontend coverage: $(cat trend4media-frontend/coverage/coverage-summary.json | jq .total.lines.pct)%"

  # ========================================
  # DEPLOYMENT JOBS
  # ========================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.trend4media.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies and build
        run: |
          cd trend4media-backend && npm ci && npm run build
          cd ../trend4media-frontend && npm ci && npm run build

      - name: Deploy to Firebase Hosting (Staging)
        run: firebase deploy --only hosting:staging,functions:staging --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          NODE_ENV: staging
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}

      - name: Run staging smoke tests
        run: |
          cd trend4media-frontend
          npm run smoke:test
        env:
          TEST_URL: https://staging.trend4media.com

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Staging deployment successful!"
          echo "URL: https://staging.trend4media.com"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://trend4media.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies and build
        run: |
          cd trend4media-backend && npm ci && npm run build
          cd ../trend4media-frontend && npm ci && npm run build

      - name: Deploy to Firebase Hosting and Functions
        run: firebase deploy --only hosting,functions --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          NODE_ENV: production
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Run production smoke tests
        run: |
          cd trend4media-frontend
          npm run smoke:test
        env:
          TEST_URL: https://trend4media.com

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Automated deployment from commit ${{ github.sha }}
            - All tests passed with 80%+ coverage
            - Successfully deployed to production
            
            ## Test Results
            - ✅ Backend unit tests: Passed
            - ✅ Frontend unit tests: Passed  
            - ✅ E2E tests: Passed
            - ✅ Production smoke tests: Passed

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          echo "URL: https://trend4media.com"
          echo "Release: v${{ github.run_number }}"

  # ========================================
  # NOTIFICATION JOBS
  # ========================================

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: failure()

    steps:
      - name: Notify team of failure
        run: |
          echo "❌ Pipeline failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          # Add Slack/Discord/Email notification here

  # ========================================
  # SECURITY & QUALITY CHECKS
  # ========================================

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run backend security audit
        working-directory: trend4media-backend
        run: |
          npm audit --audit-level=high
          npx audit-ci --config .audit-ci.json

      - name: Run frontend security audit
        working-directory: trend4media-frontend
        run: |
          npm audit --audit-level=high
          npx audit-ci --config .audit-ci.json

      - name: Upload security audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-audit-results
          path: |
            trend4media-backend/audit-results.json
            trend4media-frontend/audit-results.json

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: trend4media-frontend
        run: npm ci

      - name: Build application
        working-directory: trend4media-frontend
        run: npm run build

      - name: Run Lighthouse CI
        working-directory: trend4media-frontend
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=.lighthouserc.json
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-results
          path: trend4media-frontend/.lighthouseci/ 