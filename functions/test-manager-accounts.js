const admin = require('firebase-admin');

// Initialize Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.applicationDefault(),
    projectId: 'trend4media-billing'
  });
}

const db = admin.firestore();

async function testManagerAccountsFeatures() {
  console.log('🧪 Testing Manager Accounts Features...\n');
  
  try {
    // Test 1: Fetch all managers
    console.log('📋 Test 1: Fetching all managers...');
    const managersSnapshot = await db.collection('managers').get();
    console.log(`✅ Found ${managersSnapshot.size} managers in Firestore\n`);
    
    managersSnapshot.forEach(doc => {
      const data = doc.data();
      console.log(`👤 Manager: ${data.name} (@${data.handle})`);
      console.log(`   Type: ${data.type}, Email: ${data.email || 'Not set'}`);
      console.log(`   Commission Rate: ${(data.commissionRate * 100)}%`);
      console.log(`   ID: ${doc.id}\n`);
    });

    // Test 2: Count auto-generated managers
    console.log('🤖 Test 2: Checking auto-generated managers...');
    const autoGeneratedCount = managersSnapshot.docs.filter(doc => {
      const email = doc.data().email;
      return email && email.includes('@manager.com');
    }).length;
    console.log(`✅ Found ${autoGeneratedCount} auto-generated managers\n`);

    // Test 3: Check commission data that would be cleared
    console.log('🧹 Test 3: Checking commission data to be cleared...');
    
    const [transactions, bonuses, payouts, batches] = await Promise.all([
      db.collection('transactions').get(),
      db.collection('bonuses').get(), 
      db.collection('payoutRequests').get(),
      db.collection('uploadBatches').get()
    ]);

    console.log(`📊 Commission data found:`);
    console.log(`   Transactions: ${transactions.size}`);
    console.log(`   Bonuses: ${bonuses.size}`);
    console.log(`   Payout Requests: ${payouts.size}`);
    console.log(`   Upload Batches: ${batches.size}\n`);

    // Test 4: Simulate account generation logic
    console.log('🔐 Test 4: Simulating account generation...');
    let accountsToGenerate = 0;
    
    managersSnapshot.forEach(doc => {
      const manager = doc.data();
      // Skip if manager already has a proper email (not auto-generated)
      if (!manager.email || manager.email.includes('@manager.com')) {
        const cleanHandle = manager.handle.replace(/\s+/g, '').toLowerCase();
        const email = manager.email || `${cleanHandle}@manager.com`;
        const password = `${cleanHandle}2024!`;
        
        console.log(`   Would generate account for: ${manager.name}`);
        console.log(`     Email: ${email}`);
        console.log(`     Password: ${password}`);
        accountsToGenerate++;
      }
    });
    
    console.log(`✅ Would generate ${accountsToGenerate} accounts\n`);

    // Test 5: Check Firebase Auth users
    console.log('🔑 Test 5: Checking existing Firebase Auth users...');
    try {
      const listUsers = await admin.auth().listUsers();
      console.log(`✅ Found ${listUsers.users.length} Firebase Auth users`);
      
      listUsers.users.forEach(user => {
        if (user.customClaims?.role === 'manager') {
          console.log(`   Manager: ${user.email} (${user.displayName})`);
        }
      });
    } catch (error) {
      console.log(`❌ Error fetching Firebase Auth users: ${error.message}`);
    }

    console.log('\n🎉 All tests completed successfully!');
    console.log('\n📝 Summary:');
    console.log(`   • ${managersSnapshot.size} managers found`);
    console.log(`   • ${autoGeneratedCount} auto-generated emails`);
    console.log(`   • ${accountsToGenerate} accounts need generation`);
    console.log(`   • ${transactions.size + bonuses.size + payouts.size + batches.size} commission records to clear`);

  } catch (error) {
    console.error('❌ Test failed:', error);
  }
}

// Run the test
testManagerAccountsFeatures().then(() => {
  console.log('\n✅ Test script completed');
  process.exit(0);
}).catch(error => {
  console.error('❌ Test script failed:', error);
  process.exit(1);
}); 