rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    ////////////////////////////////////////////////////////
    //  USERS (profil-spiegel)
    ////////////////////////////////////////////////////////
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    ////////////////////////////////////////////////////////
    //  MANAGERS – Admin voll, Manager nur eigenes Profil
    ////////////////////////////////////////////////////////
    match /managers/{managerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.token.role == 'ADMIN' ||  // Uppercase Admin Check
        request.auth.token.role == 'admin' ||  // Fallback lowercase
        (request.auth.token.role == 'manager' && request.auth.token.managerId == managerId) // Manager nur eigenes
      );
    }

    ////////////////////////////////////////////////////////
    //  MANAGER EARNINGS – Admin read, Functions write
    ////////////////////////////////////////////////////////
    match /manager-earnings/{earningsId} {
      allow read: if request.auth != null && (
        request.auth.token.role == 'ADMIN' ||
        request.auth.token.role == 'admin' ||
        request.auth.token.managerId == resource.data.managerId
      );
      allow write: if false; // Cloud Functions only
    }

    ////////////////////////////////////////////////////////
    //  TRANSACTIONS – schreibbar nur über Cloud Functions (Admin SDK)
    ////////////////////////////////////////////////////////
    match /transactions/{txId} {
      allow read: if request.auth != null && (
        request.auth.token.role == 'ADMIN' ||
        request.auth.token.role == 'admin' ||
        request.auth.token.managerId == resource.data.managerId
      );
      allow write: if false; // ausschliesslich Server-SDK
    }

    ////////////////////////////////////////////////////////
    //  BONUSES – analog Transactions
    ////////////////////////////////////////////////////////
    match /bonuses/{bonusId} {
      allow read: if request.auth != null && (
        request.auth.token.role == 'ADMIN' ||
        request.auth.token.role == 'admin' ||
        request.auth.token.managerId == resource.data.managerId
      );
      allow write: if false;
    }

    ////////////////////////////////////////////////////////
    //  UPLOAD BATCHES – Admin mit erweiterten Berechtigungen
    ////////////////////////////////////////////////////////
    match /uploadBatches/{batchId} {
      allow read, write: if request.auth != null && (
        request.auth.token.role == 'ADMIN' ||
        request.auth.token.role == 'admin' ||
        request.auth.uid in ['admin-user-001', 'admin_user_001'] // Fallback für Admin UIDs
      );
    }

    ////////////////////////////////////////////////////////
    //  DASHBOARD UPDATES & BATCH SUMMARIES – read-only for Admins
    ////////////////////////////////////////////////////////
    match /dashboard-updates/{updateId} {
      allow read: if request.auth != null && (
        request.auth.token.role == 'ADMIN' || request.auth.token.role == 'admin'
      );
      allow write: if false;
    }

    match /batch-summaries/{batchId} {
      allow read: if request.auth != null && (
        request.auth.token.role == 'ADMIN' || request.auth.token.role == 'admin'
      );
      allow write: if false; // written by backend
    }

    ////////////////////////////////////////////////////////
    //  PAYOUT REQUESTS
    ////////////////////////////////////////////////////////
    match /payoutRequests/{reqId} {
      allow create: if request.auth != null && request.auth.token.role == 'manager' && request.resource.data.managerId == request.auth.token.managerId;
      allow read: if request.auth != null && (
        request.auth.token.role == 'ADMIN' || 
        request.auth.token.role == 'admin' || 
        request.auth.token.managerId == resource.data.managerId
      );
      allow update, delete: if request.auth != null && (
        request.auth.token.role == 'ADMIN' || 
        request.auth.token.role == 'admin'
      );
    }

    ////////////////////////////////////////////////////////
    //  MESSAGES – private Inbox
    ////////////////////////////////////////////////////////
    match /messages/{msgId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null; // Admin SDK oder Funktionen
      allow delete: if request.auth != null && (
        request.auth.token.role == 'ADMIN' ||
        request.auth.token.role == 'admin'
      );
    }

    ////////////////////////////////////////////////////////
    //  AUDIT LOGS – read-only für Admin
    ////////////////////////////////////////////////////////
    match /auditLogs/{logId} {
      allow read: if request.auth != null && (
        request.auth.token.role == 'ADMIN' ||
        request.auth.token.role == 'admin'
      );
      allow write: if false;
    }
  }
} 